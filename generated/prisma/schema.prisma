// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String    @id @default(cuid())
  title       String    @unique
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  color       String
  img         String
  slug        String    @unique
  products    Product[]
}

model Product {
  id           String   @id @default(cuid())
  title        String   @unique
  description  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  img          String?
  category     Category @relation(fields: [categorySlug], references: [slug])
  categorySlug String
  price        Decimal
  isFeatured   Boolean  @default(false)
  options      Json[]   @db.Json
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  products  Json[]   @db.Json
  price     Decimal
  status    String   @default("pending")
  intent_id String?  @unique
  user      User     @relation(fields: [userEmail], references: [email])
  userEmail String
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  isAdmin       Boolean   @default(false)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
